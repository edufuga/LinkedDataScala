package com.edufuga.scala.ogm.example

import org.eclipse.rdf4j.rio.{RDFFormat, Rio}
import productdata.global.util.GLOBAL
import com.edufuga.scala.entities.FullOrganisation
import com.edufuga.scala.ogm.ObjectGraphMappings
import productdata.rdf.model.IOrganisation

object ObjectGraphMappingExample extends App {
  val organisationObject: FullOrganisation = ObjectConstructionExample.organisation

  val organisationGraph: IOrganisation =
    ObjectGraphMappings.OrganisationMappings.objectToGraph(organisationObject)

  serialize()

  // TODO: Instead of (or in addition to) transforming the in-memory organisation object into a graph (ontology-based)
  //   we should _read_ (= parse) the RDF file with RIO.parse. This 'Model' needs to be then merged / added to the
  //   GLOBAL.model of OLGA, so that the autogenerated Java code can return the IOrganisation graph individual.
  //   In this specific case, the Organisation file contains a factory method that returns the previously loaded/stored
  //   organisation(s).

  val organisationObjectConvertedFromGraph =
    ObjectGraphMappings.OrganisationMappings.graphToObject(organisationGraph)

  assert(organisationObjectConvertedFromGraph == organisationObject)

  private def serialize(): Unit = {
    Rio.write(GLOBAL.model, System.out, RDFFormat.TURTLE)
  }
}